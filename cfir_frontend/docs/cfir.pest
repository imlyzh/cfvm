
block = { !block_head ~ op_def+ }

op_def = { name_bind ~ op }

name_bind = { (symbol ~ ("," ~ symbol)* ~ "=")? }

// op = { name ~ uses ~ attr ~ region ~ ":" ~ _type }
op = { name ~ uses ~ attr ~ region ~ ":" ~ type_list }

uses = { ("(" ~ (value ~ ("," ~ value)* ~ ","?)? ~ ")")? }

attr = {
  ("[" ~ (key_constant_pair ~ ("," ~ key_constant_pair)* ~ ","?)? ~ "]")?
}
key_constant_pair = { symbol ~ ":" ~ constant }

region = { ("{" ~ labeld_block* ~ "}")? }
labeld_block = { block_head_opt ~ block }

block_head_opt = { block_head? }

block_head = { (label ~ block_argument? ~ ":") }

block_argument = {
  "(" ~ (symbol_type_pair ~ ("," ~ symbol_type_pair)* ~ ","?)? ~ ")"
}

symbol_type_pair = { symbol ~ "." ~ _type }

_type =
  { generic_type
  | func_type
  }

type_or_const = { _type | constant }

generic_type = { name ~ type_argument? }

type_argument = { "<" ~ (type_or_const ~ ("," ~ type_or_const)* ~ ","?)? ~ ">" }

// func_type = { "(" ~ type_list ~ ")" ~ "->" ~ _type }
func_type = { "(" ~ type_list ~ ")" ~ "->" ~ type_list }

type_list = { (_type ~ ("," ~ _type)*)? }

name = { (symbol ~ ".")? ~ symbol }

symbol_or_op =
  { op
  | symbol
  }

value =
  { symbol_or_op
  | constant
  | label
  | argument
}

argument = { argument_order ~ symbol }

argument_order = { ("def" | "use")? }

label = { "^" ~ symbol }

constant =
  { string_lit
  // | float_lit
  | int_lit
  | uint_lit
  | bool_lit
}

int_lit = ${ signed_number ~ !("u" | "f") ~ "i"? }
uint_lit = ${ number ~ "u" }

float_lit = ${ float_number ~ "f"? }

float_number = $
    { (("+" | "-")? ~ number_hex ~ "." ~ ASCII_HEX_DIGIT+)
    | (("+" | "-")? ~ number_oct ~ "." ~ ASCII_OCT_DIGIT+)
    | (("+" | "-")? ~ number_bin ~ "." ~ ASCII_BIN_DIGIT+)
    | (("+" | "-")? ~ number_dec ~ "." ~ ASCII_DIGIT+)
}

signed_number = ${ ("+" | "-")? ~ number }

number = $
    { number_hex
    | number_oct
    | number_bin
    | number_dec
    }

number_dec = _ { ASCII_DIGIT+ }
number_oct = _ { "0o" ~ ASCII_OCT_DIGIT+ }
number_hex = _ { "0x" ~ ASCII_HEX_DIGIT+ }
number_bin = _ { "0b" ~ ASCII_BIN_DIGIT+ }

string_lit = @ { "\"" ~ (escape | (!("\\" | "\"") ~ ANY)+)* ~ "\""}
escape = _{ "\\\\"
     | "\\\""
     | "\\'"
     | "\\n"
     | "\\r"
     | "\\t"
     }

bool_lit = @{ "true" | "false" }


symbol = @{ (!(WHITE_SPACE | "." | "=" | "->" | "(" | ")" | "<" | ">" | "[" | "]" |  "{" | "}" | "," | ":" | "?" | constant) ~ ANY)+ }


COMMENT = _
    { line_comment
    // | block_comment
    }

line_comment = _ {
  "//" ~ (!NEWLINE ~ ANY)* ~ NEWLINE?
}

WHITESPACE = _
  { " "
  | "\t"
  | WHITE_SPACE
  | NEWLINE
  }