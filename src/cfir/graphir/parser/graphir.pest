file = { (!EOI ~ top_level)* ~ EOI }

top_level =
    { function_def
    | function_decl
    | type_def
    | constant_def
    | variable_def
    }

type_def = {
    // is_pub ~
    type_define_symbol ~ "=" ~ type_value ~ ";"
}

constant_def = {
    // is_pub ~
    "const" ~ global_define_symbol ~ ":" ~ type_value ~ "=" ~ constant_value ~ ";"
}

variable_def = {
    // is_pub ~
    "var" ~ global_define_symbol ~ ":" ~ type_value ~ ("=" ~ constant_value)? ~ ";"
}

constant_value =
    { simple_value
    | array_value
    | record_value
    | string_lit
}

simple_value =
    { float_number
    | number
    | char
    | vector_value
}

vector_value = {
    "<" ~ simple_value ~ ("," ~ simple_value)* ~ ">"
}

array_value = {
    "[" ~ constant_value ~ ("," ~ constant_value)* ~ "]"
}

record_value = {
    "{" ~ record_value_kv_pair ~ ("," ~ record_value_kv_pair)* ~ "}"
}

record_value_kv_pair = {
    symbol ~ ":" ~ constant_value
}


function_decl = {
    "import" ~ "fn" ~ global_define_symbol ~ function_type ~ ";"
}

function_attr = {
    is_extern ~
    // is_pub~
    is_inline
    }

is_extern = { "extern"? }

// is_pub = { "pub"? }

is_inline = { ("inline" | "const")? }

// types

function_type = {
    params ~ "->" ~ type_bind_metadata
}

params = {
    "(" ~ (params_pair ~ ("," ~ params_pair)*)? ~ ")"
}

params_pair = {
    params_name ~ ":" ~ type_bind_metadata
}

type_bind_metadata = { type_value ~ ("," ~ alloca_type)? }


alloca_type = {
    ( alloca_type_reg
    | alloca_type_stack)?
}

reg_pos = { reg_enum | reg_range | reg_number }

alloca_type_reg = {
    "reg" ~ reg_type ~ reg_pos
}

reg_type = {
    "int" | "float" | "simd" | "vector"
}

reg_enum = { "(" ~ reg_number ~ ("," ~ reg_number)* ~ ")" }

reg_range = { reg_number ~ "-" ~ reg_number }

reg_number = { number }

alloca_type_stack = {
    "stack" ~ store_type_opt
}

store_type_opt = {
    store_type?
}

store_type = {
    "atomic" | "volatile"
}

type_value =
    { type_
    | type_symbol
    }

type_ =
    { void_type
    | first_class_type
    | function_type
    }

void_type = @{ "void" }

first_class_type =
    { opaque_type
    | simple_type
    | array_type
    | record_type
}

opaque_type = { "opaque" }

simple_type =
    { int_type
    | float_type
    | pointer_type
    | vector_type
    }

int_type = @{ "i" ~ number }

float_type = @
    { "f8"
    | "f16"
    | "f32"
    | "f64"
    | "f128"
    | "ppc_f128"
}

pointer_type = {
    "*" ~ type_
}

vector_type = {
    "<" ~ simple_type ~ ";" ~ number ~ ">"
}

array_type = {
    "[" ~ type_ ~ ";" ~ number ~ "]"
}

record_type = {
    is_not_aligned ~ "{" ~ (record_kv_pair ~ ("," ~ record_kv_pair)*)? ~ "}"
}

is_not_aligned = { "#"? }

record_kv_pair = {
    symbol ~ ":" ~ type_
}

params_name = @
    { UNDERLINE
    | local_symbol
}

// types end

function_def = {
    function_attr ~ "fn" ~ global_define_symbol ~
    function_type ~ "{" ~
    	begin_basic_block? ~
        basic_block*
    ~ "}"
}

label_symbol_opt = {
    label_symbol?
}

begin_basic_block = {
    label_symbol? ~
    insts ~
    terminator?
}

basic_block = {
    label_symbol ~
    insts ~
    terminator?
}

insts = { (!terminator ~ inst)* }

inst =
    { store
    | bind
    | operator
    }

store = {
    "store" ~ local_symbol ~ value
}

bind = {
    local_symbol ~ "=" ~ operator
}

// is_mutable = { "mut"? }

value =
    { symbol_ref
    | constant_value
    }

operator =
    { alloca
    | get_ptr
    | load
    | cast
    | add
    | fadd
    | sub
    | fsub
    | mul
    | fmul
    | udiv
    | sdiv
    | urem
    | srem
    | frem
    | shl
    | lshr
    | ashr
    | and
    | or
    | xor
    | get_value
    | get_item
    | set_value
    | set_item
    | trunc
    | zext
    | sext
    | ftrunc
    | fext
    | icmp
    | fcmp
    | phi
    | call
}

alloca_type_opt = {
    alloca_type?
}

alloca = {
    "alloca" ~ type_bind_metadata ~ ("<-" ~ symbol_ref)?
}

get_ptr = {
    "get-ptr" ~ value ~ ("," ~ index_list)?
}

load = { "load" ~ type_ ~ value }
cast = { "cast" ~ type_ ~ value }

add = { "add" ~ value ~ "," ~ value }
fadd = { "fadd" ~ value ~ "," ~ value }
sub = { "sub" ~ value ~ "," ~ value }
fsub = { "fsub" ~ value ~ "," ~ value }
mul = { "mul" ~ value ~ "," ~ value }
fmul = { "fmul" ~ value ~ "," ~ value }
udiv = { "udiv" ~ value ~ "," ~ value }
sdiv = { "sdiv" ~ value ~ "," ~ value }
urem = { "urem" ~ value ~ "," ~ value }
srem = { "srem" ~ value ~ "," ~ value }
frem = { "frem" ~ value ~ "," ~ value }
shl = { "shl" ~ value ~ "," ~ value }
lshr = { "lshr" ~ value ~ "," ~ value }
ashr = { "ashr" ~ value ~ "," ~ value }
and = { "and" ~ value ~ "," ~ value }
or = { "or" ~ value ~ "," ~ value }
xor = { "xor" ~ value ~ "," ~ value }

get_value = { "get-value" ~ value ~ index_list }

get_item = { "get-item" ~ value ~ value }

set_item = { "set-item" ~ value ~ index_list ~ value }

set_value = { "set-item" ~ value ~ value ~ value }

trunc = { "trunc" ~ int_type ~ value }
zext = { "zext" ~ int_type ~ value }
sext = { "sext" ~ int_type ~ value }

ftrunc = { "ftrunc" ~ float_type ~ value }
fext = { "fext" ~ float_type ~ value }

icmp = { "icmp" ~ icmp_op ~ symbol_ref ~ "," ~ symbol_ref }
fcmp = { "fcmp" ~ fcmp_op ~ symbol_ref ~ "," ~ symbol_ref }

icmp_op =
    { "eq"
    | "ne"
    | "sge"
    | "sgt"
    | "sle"
    | "slt"
    | "uge"
    | "ugt"
    | "ule"
    | "ult"
    }

fcmp_op =
    { "false"
    | "oeq"
    | "oge"
    | "ogt"
    | "ole"
    | "olt"
    | "one"
    | "ord"
    | "true"
    | "ueq"
    | "uge"
    | "ugt"
    | "ule"
    | "ult"
    | "une"
    | "uno"
    }

phi = {
    "phi" ~ "[" ~ phi_pair ~ ("," ~ phi_pair)* ~ "]"
}

phi_pair = {
    label_symbol ~ ":" ~ value
}

call = {
    "call" ~ value ~ "(" ~ value ~ ("," ~ value)* ~ ")"
}

index_list = {
    index ~ ("." ~ index)*
}

index =
    { symbol
    | number
    }

terminator =
    { ret
    | branch
    // | conds
    | switch
    | unrechable
    }

ret = {
    "ret" ~ symbol_ref?
}

branch = {
    "br" ~ branch_op ~ symbol_ref ~ "?" ~ label_symbol ~ "," ~ label_symbol
}

branch_op = {
    ( "if-nil"
    | "if-non-nil")?
    }

/*
conds = {
    "conds" ~ "[" ~ conds_pairs ~ conds_else_pair? ~ "]"
}

conds_pairs = { conds_pair ~ ("," ~ conds_pair)* }

conds_pair = { value ~ ":" ~ label_symbol }

conds_else_pair = { UNDERLINE ~ ":" ~ label_symbol }
*/

switch = {
    "switch" ~ symbol_ref ~ "[" ~ switch_pair ~ ("," ~ switch_pair)* ~ "]"
}

switch_pair = { simple_value ~ ":" ~ label_symbol }


//////////////////////////////////////////////////////////

unrechable = { "unrechable" }

global_symbol = ${ (symbol ~ ".")? ~ global_define_symbol }

global_define_symbol = ${ "@" ~ symbol }

local_symbol = ${ "%" ~ symbol }

label_symbol = ${ symbol ~ ":" }

symbol_ref =
    { local_symbol
    | global_symbol
    | symbol
    }

symbol = $
    { _quoted_name
    | _name
    | _id
}

type_symbol = ${
    (symbol ~ ".")? ~ type_define_symbol
}

type_define_symbol = $
    { _quoted_name
    | _name
    | type_id
    }

type_id = _{
    "t" ~ _id
}

_quoted_name = @{ "\"" ~ (!"\"" ~ ANY)* ~ "\"" }

_id = @{ ('0'..'9')+ }

_name = $ { !KEYWORD ~ (ASCII_ALPHA_LOWER | UNDERLINE) ~ (ASCII_ALPHANUMERIC | UNDERLINE)* }

KEYWORD = ${ "let" | "if" | "then" | "else" | "cond" | "switch" | "while" | "var" | "mod" }

UNDERLINE = _{ "_" }

// string

string_lit = $ { "\"" ~ (escape | (!("\\" | "\"") ~ ANY)+)* ~ "\""}


char = {
    "'" ~ (escape | (!("\\" | "\"") ~ ANY)) ~ "'"
}

escape = _{ "\\\\"
          | "\\\""
          | "\\'"
          | "\\n"
          | "\\r"
          | "\\t"
          }

// number

float_number = $
    { (number_hex ~ "." ~ ASCII_HEX_DIGIT+)
    | (number_oct ~ "." ~ ASCII_OCT_DIGIT+)
    | (number_bin ~ "." ~ ASCII_BIN_DIGIT+)
    | (number_dec ~ "." ~ ASCII_DIGIT+)
}

number = $
    { number_hex
    | number_oct
    | number_bin
    | number_dec
    }

number_dec = _ { ("+" | "-")? ~ ASCII_DIGIT+ }

number_oct = _ { ("+" | "-")? ~ "0o" ~ ASCII_OCT_DIGIT+ }

number_hex = _ { ("+" | "-")? ~ "0x" ~ ASCII_HEX_DIGIT+ }

number_bin = _ { ("+" | "-")? ~ "0b" ~ ASCII_BIN_DIGIT+ }


WHITESPACE = _ { " "
               | "\t"
               | WHITE_SPACE
               | NEWLINE
               }

COMMENT = _ { "//" ~ (!NEWLINE ~ ANY)* ~ NEWLINE? }