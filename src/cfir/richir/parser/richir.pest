
module = { "mod" ~ symbol ~ ":" ~ module_bodys ~ EOI }

module_bodys = { module_body* }

module_body =
    { function_def
    | function_decl
    | type_def
    | constant_def
    | variable_def
    }

type_def = {
    is_pub ~ type_define_symbol ~ "=" ~ type_value ~ ";"
}

constant_def = {
    is_pub ~ "const" ~ global_define_symbol ~ ":" ~ type_value ~ "=" ~ constant_value ~ ";"
}

variable_def = {
    is_pub ~ "var" ~ global_define_symbol ~ ":" ~ type_value ~ ("=" ~ constant_value)? ~ ";"
}

constant_value =
    { simple_value
    | array_value
    | record_value
    | string_lit
}

simple_value =
    { float_number
    | number
    | char
    | vector_value
}

vector_value = {
    "<" ~ simple_value ~ ("," ~ simple_value)* ~ ">"
}

array_value = {
    "[" ~ constant_value ~ ("," ~ constant_value)* ~ "]"
}

record_value = {
    "{" ~ record_value_kv_pair ~ ("," ~ record_value_kv_pair)* ~ "}"
}

record_value_kv_pair = {
    symbol ~ ":" ~ constant_value
}


function_decl = {
    "import" ~ "fn" ~ global_define_symbol ~ function_type ~ ";"
}


function_def = {
    function_attr ~ "fn" ~ global_define_symbol ~
    function_type ~ begin
}

function_attr = { is_extern ~ is_pub ~ is_inline }

is_extern = { "extern"? }

is_pub = { "pub"? }

is_inline = { ("inline" | "const")? }

// types

function_type = {
    params ~ "->" ~ type_bind_metadata
}

params = {
    "(" ~ (params_pair ~ ("," ~ params_pair)*)? ~ ")"
}

params_pair = {
    params_name ~ ":" ~ type_bind_metadata
}

type_bind_metadata = { type_value ~ ("," ~ alloca_type)? }


alloca_type = {
    ( alloca_type_reg
    | alloca_type_stack)?
}

reg_pos = { reg_enum | reg_range | reg_number }

alloca_type_reg = {
    "reg" ~ reg_type ~ reg_pos
}

reg_type = {
    "int" | "float" | "simd" | "vector"
}

reg_enum = { "(" ~ reg_number ~ ("," ~ reg_number)* ~ ")" }

reg_range = { reg_number ~ "-" ~ reg_number }

reg_number = { number }

alloca_type_stack = _{ "stack" }

type_value =
    { type_
    | type_symbol
    }

type_ =
    { void_type
    | first_class_type
    | function_type
    }

void_type = @{ "void" }

first_class_type =
    { opaque_type
    | simple_type
    | array_type
    | record_type
}

opaque_type = { "opaque" }

simple_type =
    { int_type
    | float_type
    | pointer_type
    | vector_type
    }

int_type = @
    { "i1"
    | "i8"
    | "i16"
    | "i32"
    | "i64"
    | "i128"
}

float_type = @
    { "f8"
    | "f16"
    | "f32"
    | "f64"
    | "f128"
    | "ppc_f128"
}

pointer_type = {
    "*" ~ type_
}

vector_type = {
    "<" ~ simple_type ~ ";" ~ number ~ ">"
}

array_type = {
    "[" ~ type_ ~ ";" ~ number ~ "]"
}

record_type = {
    is_not_aligned ~ "{" ~ (record_kv_pair ~ ("," ~ record_kv_pair)*)? ~ "}"
}

is_not_aligned = { "#"? }

record_kv_pair = {
    symbol ~ ":" ~ type_
}

params_name = @
    { UNDERLINE
    | local_symbol
}

// types end

expr =
    { let_binding
    | conds
    | if_expr
    | switch
    | while_expr
    | begin
    | store
    | call
    | value
	}

call_or_value =
    { call
    | value
    }

let_binding = {
    "let" ~ local_symbol ~ type_bind_opt ~ "=" ~ call_or_value ~ expr
}

type_bind_opt = {
    (":" ~ type_bind_metadata)?
}

if_expr = {
    "if" ~ value ~ "then" ~ expr ~ "else" ~ expr
}

while_expr = {
    "while" ~ "(" ~ value ~ acc_opt ~ ")" ~ expr
}

acc_opt = {
    (";" ~ store)?
}

begin = {
    "{" ~ (expr ~ (";" ~ expr)*)? ~ "}"
}

store = {
    symbol_ref ~ "=" ~ call_or_value
}

value =
    { symbol_ref
    | constant_value
    }

call = {
    value ~ "(" ~ (value ~ ("," ~ value)*)? ~ ")"
}

symbol_ref =
    { local_symbol
    | global_symbol
    | symbol
    }

conds = {
    "if" ~ conds_pair ~
    ("elif" ~ conds_pair)* ~
    "else" ~ expr
}

conds_pair = {
    value ~ "then" ~ expr
}

switch = {
    "switch" ~ value ~ "{" ~ (switch_case ~ ("," ~ switch_case)* ~ "," ~ default_case)? ~ "}"
}

switch_case = {
    "case" ~ constant_value ~ ":" ~ expr
}

default_case = {
    "default" ~ ":" ~ expr
}

//////////////////////////////////////////////////////////

unrechable = { "unrechable" }

global_symbol = ${ (symbol ~ ".")? ~ global_define_symbol }

global_define_symbol = ${ "@" ~ symbol }

local_symbol = ${ "%" ~ symbol }

symbol = $
    { _quoted_name
    | _name
    | _id
}

type_symbol = ${
    (symbol ~ ".")? ~ type_define_symbol
}

type_define_symbol = $
    { _quoted_name
    | _name
    | type_id
    }

type_id = _{
    "t" ~ _id
}

_quoted_name = @{ "\"" ~ (!"\"" ~ ANY)* ~ "\"" }

_id = @{ ('0'..'9')+ }

_name = $ { !KEYWORD ~ (ASCII_ALPHA_LOWER | UNDERLINE) ~ (ASCII_ALPHANUMERIC | UNDERLINE)* }

KEYWORD = ${ "let" | "if" | "then" | "else" | "cond" | "switch" | "while" }

UNDERLINE = _{ "_" }

// string

string_lit = $ { "\"" ~ (escape | (!("\\" | "\"") ~ ANY)+)* ~ "\""}


char = {
    "'" ~ (escape | (!("\\" | "\"") ~ ANY)) ~ "'"
}

escape = _{ "\\\\"
          | "\\\""
          | "\\'"
          | "\\n"
          | "\\r"
          | "\\t"
          }

// number

float_number = $
    { (number_hex ~ "." ~ ASCII_HEX_DIGIT+)
    | (number_oct ~ "." ~ ASCII_OCT_DIGIT+)
    | (number_bin ~ "." ~ ASCII_BIN_DIGIT+)
    | (number_dec ~ "." ~ ASCII_DIGIT+)
}

number = $
    { number_hex
    | number_oct
    | number_bin
    | number_dec
    }

number_dec = _ { ("+" | "-")? ~ ASCII_DIGIT+ }

number_oct = _ { ("+" | "-")? ~ "0o" ~ ASCII_OCT_DIGIT+ }

number_hex = _ { ("+" | "-")? ~ "0x" ~ ASCII_HEX_DIGIT+ }

number_bin = _ { ("+" | "-")? ~ "0b" ~ ASCII_BIN_DIGIT+ }


WHITESPACE = _ { " "
               | "\t"
               | WHITE_SPACE
               | NEWLINE
               }

COMMENT = _ { "//" ~ (!NEWLINE ~ ANY)* ~ NEWLINE? }