
op_def_pat = { (symbol ~ "=")? ~ op_pat }

op_pat = { name ~ uses }

uses = { ("(" ~ (catch ~ ("," ~ catch)* ~ ","?)? ~ ")")? }

name = { (symbol ~ ".")? ~ symbol }

catch = { catch_0 | catch_1 }
catch_0 = { "?" ~ symbol ~ (":" ~ value)? }
catch_1 = { value }

value =
  { symbol_or_op_pat
  | constant
  | label
  | argument
}

symbol_or_op_pat =
  { symbol
  | op_pat
  }

argument = { argument_order ~ symbol }

argument_order = { ("def" | "use")? }

label = _{ symbol }

constant =
  { string_lit
  // | float_lit
  | int_lit
  | uint_lit
  | bool_lit
}

int_lit = ${ signed_number ~ !("u" | "f") ~ "i"? }
uint_lit = ${ number ~ "u" }

float_lit = ${ float_number ~ "f"? }

float_number = $
    { (("+" | "-")? ~ number_hex ~ "." ~ ASCII_HEX_DIGIT+)
    | (("+" | "-")? ~ number_oct ~ "." ~ ASCII_OCT_DIGIT+)
    | (("+" | "-")? ~ number_bin ~ "." ~ ASCII_BIN_DIGIT+)
    | (("+" | "-")? ~ number_dec ~ "." ~ ASCII_DIGIT+)
}

signed_number = ${ ("+" | "-")? ~ number }

number = $
    { number_hex
    | number_oct
    | number_bin
    | number_dec
    }

number_dec = _ { ASCII_DIGIT+ }
number_oct = _ { "0o" ~ ASCII_OCT_DIGIT+ }
number_hex = _ { "0x" ~ ASCII_HEX_DIGIT+ }
number_bin = _ { "0b" ~ ASCII_BIN_DIGIT+ }

string_lit = @ { "\"" ~ (escape | (!("\\" | "\"") ~ ANY)+)* ~ "\""}
escape = _{ "\\\\"
     | "\\\""
     | "\\'"
     | "\\n"
     | "\\r"
     | "\\t"
     }

bool_lit = @{ "true" | "false" }


symbol = @{ (!(WHITE_SPACE | "." | "=" | "->" | "(" | ")" | "<" | ">" | "[" | "]" |  "{" | "}" | "," | ":" | "?") ~ ANY)+ }


COMMENT = _
    { line_comment
    // | block_comment
    }

line_comment = _ {
  "//" ~ (!NEWLINE ~ ANY)* ~ NEWLINE?
}

WHITESPACE = _
  { " "
  | "\t"
  | WHITE_SPACE
  | NEWLINE
  }